// Generated by generate.go; do not edit manually
package server

import (
	"encoding/json"
	"net/http"
	"strconv"
	"strings"
	"subLease/src/server/address"
	"subLease/src/server/database"
	"subLease/src/server/domain"

	"github.com/gorilla/mux"
)

func getApartmentsHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		json.NewEncoder(w).Encode(database.GetApartments())
	}
}

func getApartmentHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(mux.Vars(r)["id"])
		if apartment, found := database.GetApartment(id); found {
			json.NewEncoder(w).Encode(apartment)
		}
	}
}

func createApartmentHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		var apartment domain.Apartment
		_ = json.NewDecoder(r.Body).Decode(&apartment)

		json.NewEncoder(w).Encode(database.CreateApartment(apartment))
	}
}

func updateApartmentHandler(db database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		var errors []string
		var id int

		queryValues := r.URL.Query()
		apartmentUpdate := database.ApartmentUpdate{}

		retrieveInt("id", queryValues, func(idString string) (int, error) {
			return strconv.Atoi(idString)
		}, &errors, func(parsedId int) {
			id = parsedId
		})

		retrieveInt("number", queryValues, func(numberString string) (int, error) {
			return strconv.Atoi(numberString)
		}, &errors, func(parsedNumber int) {
			apartmentUpdate.Number = &parsedNumber
		})

		retrieveAddress("address", queryValues, func(addressString string) (address.Address, error) {
			var address address.Address
			err := json.NewDecoder(strings.NewReader(addressString)).Decode(&address)
			return address, err
		}, &errors, func(parsedAddress address.Address) {
			apartmentUpdate.Address = &parsedAddress
		})

		if len(errors) > 0 {
			jsonError, _ := json.Marshal(errors)
			w.Header().Set("Content-Type", "application/json")
			http.Error(w, string(jsonError), http.StatusBadRequest)
			return
		}

		updatedApartment, err := db.UpdateApartment(id, apartmentUpdate)
		if err == nil {
			json.NewEncoder(w).Encode(updatedApartment)
		} else {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
}

func deleteApartmentHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(mux.Vars(r)["id"])
		if apartment, found := database.DeleteApartment(id); found {
			json.NewEncoder(w).Encode(apartment)
		}
	}
}
