// Generated by text/template; DO NOT EDIT
package server




func getApartmentsHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		json.NewEncoder(w).Encode(database.GetApartments())
	}
}

func getApartmentHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(mux.Vars(r)["id"])
		if apartment, found := database.GetApartment(id); found {
			json.NewEncoder(w).Encode(apartment)
		}
	}
}

func createApartmentHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		var apartment domain.Apartment
		_ = json.NewDecoder(r.Body).Decode(&apartment)

		json.NewEncoder(w).Encode(database.CreateApartment(apartment))
	}
}

func updateApartmentHandler(db database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
	    queryValues := r.URL.Query()
        strconv.Atoi(id)
        strconv.Atoi(number)
        var address address.Address; _ = json.NewDecoder(strings.NewReader(address))).Decode(&address)

		apartmentUpdate := database.ApartmentUpdate{
            Number: &number,
            Address: &address,
		}

		updatedApartment, foundApartmentWithId := db.UpdateApartment(id, apartmentUpdate)
		if foundApartmentWithId {
			json.NewEncoder(w).Encode(updatedApartment)
		} else {
            http.Error(w, "No apartment with that id was found.", http.StatusBadRequest)
		}
	}
}

func deleteApartmentHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(mux.Vars(r)["id"])
		if apartment, found := database.DeleteApartment(id); found {
			json.NewEncoder(w).Encode(apartment)
		}
	}
}
