// Generated by generate.go; do not edit manually
package database

import (
	"errors"
	"fmt"
	"subLease/src/server/domain"
	"time"
)

type LeaseContractUpdate struct {
	Id        *int
	From      *time.Time
	To        *time.Time
	Owner     *int
	Tenant    *int
	Apartment *int
}

func (lc *LeaseContractUpdate) UpdateLeaseContractWithValuesFrom(e domain.LeaseContract, database Database) (domain.LeaseContract, error) {
	if lc.Id != nil {
		e.Id = *lc.Id
	}
	if lc.From != nil {
		e.From = *lc.From
	}
	if lc.To != nil {
		e.To = *lc.To
	}
	if lc.Owner != nil {

		if owner, found := database.GetOwner(*lc.Owner); found {
			e.Owner = owner
		} else {
			return domain.LeaseContract{}, errors.New(fmt.Sprintf("referential integrity on Owner not upheld. No Owner with id %d found", *lc.Owner))
		}

	}
	if lc.Tenant != nil {

		if tenant, found := database.GetTenant(*lc.Tenant); found {
			e.Tenant = tenant
		} else {
			return domain.LeaseContract{}, errors.New(fmt.Sprintf("referential integrity on Tenant not upheld. No Tenant with id %d found", *lc.Tenant))
		}

	}
	if lc.Apartment != nil {

		if apartment, found := database.GetApartment(*lc.Apartment); found {
			e.Apartment = apartment
		} else {
			return domain.LeaseContract{}, errors.New(fmt.Sprintf("referential integrity on Apartment not upheld. No Apartment with id %d found", *lc.Apartment))
		}

	}
	return e, nil
}
