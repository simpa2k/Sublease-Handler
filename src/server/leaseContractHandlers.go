// Generated by text/template; DO NOT EDIT
package server

import (
	"subLease/src/server/database"
	"net/http"
	"encoding/json"
	"strconv"
	"github.com/gorilla/mux"
	"subLease/src/server/domain"
	"time"
)

func getLeaseContractsHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		json.NewEncoder(w).Encode(database.GetLeaseContracts())
	}
}

func getLeaseContractHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(mux.Vars(r)["id"])
		if leaseContract, found := database.GetLeaseContract(id); found {
			json.NewEncoder(w).Encode(leaseContract)
		}
	}
}

func createLeaseContractHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		var leaseContract domain.LeaseContract
		_ = json.NewDecoder(r.Body).Decode(&leaseContract)

		json.NewEncoder(w).Encode(database.CreateLeaseContract(leaseContract))
	}
}

func updateLeaseContractHandler(db database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
	    queryValues := r.URL.Query()
        strconv.Atoi(id)
        time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", from)
        time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", to)
        strconv.Atoi(owner)
        strconv.Atoi(tenant)
        strconv.Atoi(apartment)

		leaseContractUpdate := database.LeaseContractUpdate{
            From: &from,
            To: &to,
            Owner: &owner,
            Tenant: &tenant,
            Apartment: &apartment,
		}

		updatedLeaseContract, foundLeaseContractWithId := db.UpdateLeaseContract(id, leaseContractUpdate)
		if foundLeaseContractWithId {
			json.NewEncoder(w).Encode(updatedLeaseContract)
		} else {
            http.Error(w, "No lease contract with that id was found.", http.StatusBadRequest)
		}
	}
}

func deleteLeaseContractHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(mux.Vars(r)["id"])
		if leaseContract, found := database.DeleteLeaseContract(id); found {
			json.NewEncoder(w).Encode(leaseContract)
		}
	}
}
