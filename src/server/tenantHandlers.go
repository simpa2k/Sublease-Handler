// Generated by text/template; DO NOT EDIT
package server




func getTenantsHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		json.NewEncoder(w).Encode(database.GetTenants())
	}
}

func getTenantHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(mux.Vars(r)["id"])
		if tenant, found := database.GetTenant(id); found {
			json.NewEncoder(w).Encode(tenant)
		}
	}
}

func createTenantHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		var tenant domain.Tenant
		_ = json.NewDecoder(r.Body).Decode(&tenant)

		json.NewEncoder(w).Encode(database.CreateTenant(tenant))
	}
}

func updateTenantHandler(db database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
	    queryValues := r.URL.Query()
        strconv.Atoi(id)
        s, nil
        s, nil
        var socialSecurityNumber socialSecurityNumber.SocialSecurityNumber; _ = json.NewDecoder(strings.NewReader(socialSecurityNumber))).Decode(&socialSecurityNumber)

		tenantUpdate := database.TenantUpdate{
            FirstName: &firstName,
            LastName: &lastName,
            SocialSecurityNumber: &socialSecurityNumber,
		}

		updatedTenant, foundTenantWithId := db.UpdateTenant(id, tenantUpdate)
		if foundTenantWithId {
			json.NewEncoder(w).Encode(updatedTenant)
		} else {
            http.Error(w, "No tenant with that id was found.", http.StatusBadRequest)
		}
	}
}

func deleteTenantHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(mux.Vars(r)["id"])
		if tenant, found := database.DeleteTenant(id); found {
			json.NewEncoder(w).Encode(tenant)
		}
	}
}
