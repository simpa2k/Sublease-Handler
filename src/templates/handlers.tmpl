// Generated by text/template; DO NOT EDIT
package server

{{ $pascalCased := .Entity | PascalCase }}
{{ $camelCased  := .Entity | CamelCase  }}

func get{{ $pascalCased }}sHandler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		json.NewEncoder(w).Encode(database.Get{{ $pascalCased }}s())
	}
}

func get{{ $pascalCased }}Handler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(mux.Vars(r)["id"])
		if {{ $camelCased }}, found := database.Get{{ $pascalCased }}(id); found {
			json.NewEncoder(w).Encode({{ $camelCased }})
		}
	}
}

func create{{ $pascalCased }}Handler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		var {{ $camelCased }} domain.{{ $pascalCased }}
		_ = json.NewDecoder(r.Body).Decode(&{{ $camelCased }})

		json.NewEncoder(w).Encode(database.Create{{ $pascalCased }}({{ $camelCased }}))
	}
}

func update{{ $pascalCased }}Handler(db database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
	    {{- $idIdentifier := "id" }}
	    var {{ $idIdentifier }} int
	    {{ $valuesIdentifier := "queryValues" }}
		{{ $valuesIdentifier }} := r.URL.Query()
        {{ $camelCased }}Update := database.{{ $pascalCased }}Update{}
        {{ range .Fields }}

        {{- $formattedIdentifier := .Identifier | Decapitalize }}
        {{- $stringValueIdentifier := print $formattedIdentifier "String" }}
        {{- $parsedValueIdentifier := print "parsed" ($formattedIdentifier | Capitalize) }}
        retrieve{{ .TypeDeclaration | FormatTypeDeclaration }}("{{ $formattedIdentifier }}", {{ $valuesIdentifier }}, func({{ $stringValueIdentifier }} string) ({{ .TypeDeclaration }}, error) {
            {{ call .FromStringConverter $stringValueIdentifier }}
        }, func ({{ $parsedValueIdentifier }} {{ .TypeDeclaration }}) {
            {{- if eq $formattedIdentifier $idIdentifier }}
            {{ call .HandlerFunction "id" $parsedValueIdentifier }}
            {{- else }}
            {{ call .HandlerFunction (print $camelCased "Update") $parsedValueIdentifier }}
            {{- end }}
        })
        {{ end }}

		updated{{ $pascalCased }}, found{{ $pascalCased }}WithId := db.Update{{ $pascalCased }}(id, {{ $camelCased }}Update)
		if found{{ $pascalCased }}WithId {
			json.NewEncoder(w).Encode(updated{{ $pascalCased }})
		} else {
            http.Error(w, "No {{ $camelCased | CamelCaseToNormalText }} with that id was found.", http.StatusBadRequest)
		}
	}
}

func delete{{ $pascalCased }}Handler(database database.Database) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		id, _ := strconv.Atoi(mux.Vars(r)["id"])
		if {{ $camelCased }}, found := database.Delete{{ $pascalCased }}(id); found {
			json.NewEncoder(w).Encode({{ $camelCased }})
		}
	}
}
