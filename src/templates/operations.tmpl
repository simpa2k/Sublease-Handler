// Generated by text/template; DO NOT EDIT
package mockDatabase

import (
	"subLease/src/server/domain"
	"subLease/src/server/database"
)

func (d mockDatabase) Get{{ .Entity | Capitalize }}s() []domain.{{ .Entity | Capitalize }} {
	return d.{{ .Entity | Decapitalize }}s
}

func (d mockDatabase) Get{{ .Entity | Capitalize }}(id int) (domain.{{ .Entity | Capitalize }}, bool) {
	if {{ .Entity | Decapitalize }}, found := find{{ .Entity | Capitalize }}ById(d.{{ .Entity | Decapitalize }}s, id); found {
		return *{{ .Entity | Decapitalize }}, found
	}
	return domain.{{ .Entity | Capitalize }}{}, false
}

func find{{ .Entity | Capitalize }}ById({{ .Entity | Decapitalize }}s []domain.{{ .Entity | Capitalize }}, id int) (*domain.{{ .Entity | Capitalize }}, bool) {
	for _, {{ .Entity | Decapitalize }} := range {{ .Entity | Decapitalize }}s {
		if {{ .Entity | Decapitalize }}.Id == id {
			return &{{ .Entity | Decapitalize }}, true
		}
	}
	return nil, false
}

func (d *mockDatabase) Create{{ .Entity | Capitalize }}({{ .Entity | Decapitalize }} domain.{{ .Entity | Capitalize }}) []domain.{{ .Entity | Capitalize }} {
	d.{{ .Entity | Decapitalize }}s = append(d.{{ .Entity | Decapitalize }}s, {{ .Entity | Decapitalize }})
	return d.{{ .Entity | Decapitalize }}s
}

func (d *mockDatabase) Update{{ .Entity | Capitalize }}(id int, {{ .Entity | Decapitalize }}Update database.{{ .Entity | Capitalize }}Update) (domain.{{ .Entity | Capitalize }}, bool) {
	if i := indexOf{{ .Entity | Capitalize }}(d.{{ .Entity | Decapitalize }}s, id); i != -1 {
		{{ .Entity | Decapitalize }}Update.Update{{ .Entity | Capitalize }}WithValuesFrom(&d.{{ .Entity | Decapitalize }}s[i], d)
		return d.{{ .Entity | Decapitalize }}s[i], true
	}
	return domain.{{ .Entity | Capitalize }}{}, false
}

func indexOf{{ .Entity | Capitalize }}({{ .Entity | Decapitalize }}s []domain.{{ .Entity | Capitalize }}, id int) (int) {
	for i, {{ .Entity | Decapitalize }} := range {{ .Entity | Decapitalize }}s {
		if {{ .Entity | Decapitalize }}.Id == id {
			return i
		}
	}
	return -1
}

func (d* mockDatabase) Delete{{ .Entity | Capitalize }}(id int) (domain.{{ .Entity | Capitalize }}, bool) {
	{{ .Entity | Decapitalize }}ToRemove := domain.{{ .Entity | Capitalize }}{}
	found := false
	j := 0
	for _, {{ .Entity | Decapitalize }} := range d.{{ .Entity | Decapitalize }}s {
		if {{ .Entity | Decapitalize }}.Id != id {
			d.{{ .Entity | Decapitalize }}s[j] = {{ .Entity | Decapitalize }}
			j++
		} else {
			{{ .Entity | Decapitalize }}ToRemove = {{ .Entity | Decapitalize }}
			found = true
		}
	}
	d.{{ .Entity | Decapitalize }}s = d.{{ .Entity | Decapitalize }}s[:j]
	return {{ .Entity | Decapitalize }}ToRemove, found
}

