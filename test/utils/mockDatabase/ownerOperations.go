// Generated by generate.go; do not edit manually
package mockDatabase

import (
	"errors"
	"subLease/src/server/database"
	"subLease/src/server/domain"
)

func (d mockDatabase) GetOwners() []domain.Owner {
	return d.owners
}

func (d mockDatabase) GetOwner(id int) (domain.Owner, bool) {
	if owner, found := findOwnerById(d.owners, id); found {
		return *owner, found
	}
	return domain.Owner{}, false
}

func (d mockDatabase) GetOwnersById(ids []int) []domain.Owner {
	var foundOwners []domain.Owner
	for _, id := range ids {
		if owner, found := findOwnerById(d.owners, id); found {
			foundOwners = append(foundOwners, *owner)
		}
	}
	return foundOwners
}

func findOwnerById(owners []domain.Owner, id int) (*domain.Owner, bool) {
	for _, owner := range owners {
		if owner.Id == id {
			return &owner, true
		}
	}
	return nil, false
}

func (d *mockDatabase) CreateOwner(owner domain.Owner) []domain.Owner {
	d.owners = append(d.owners, owner)
	return d.owners
}

func (d *mockDatabase) UpdateOwner(id int, ownerUpdate database.OwnerUpdate) (domain.Owner, error) {
	entityToReturn := domain.Owner{}
	var errorToReturn error
	if i := indexOfOwner(d.owners, id); i != -1 {
		updated, err := ownerUpdate.UpdateOwnerWithValuesFrom(d.owners[i], d)
		if err != nil {
			errorToReturn = err
		} else {
			d.owners[i] = updated
			entityToReturn = updated
		}
	} else {
		errorToReturn = errors.New("no Owner with that id was found")
	}
	return entityToReturn, errorToReturn
}

func indexOfOwner(owners []domain.Owner, id int) int {
	for i, owner := range owners {
		if owner.Id == id {
			return i
		}
	}
	return -1
}

func (d *mockDatabase) DeleteOwner(id int) (domain.Owner, bool) {
	ownerToRemove := domain.Owner{}
	found := false
	j := 0
	for _, owner := range d.owners {
		if owner.Id != id {
			d.owners[j] = owner
			j++
		} else {
			ownerToRemove = owner
			found = true
		}
	}
	d.owners = d.owners[:j]
	return ownerToRemove, found
}
