// Generated by text/template; DO NOT EDIT
package mockDatabase

import (
	"subLease/src/server/domain"
	"subLease/src/server/database"
)




func (d mockDatabase) GetTenants() []domain.Tenant {
	return d.tenants
}

func (d mockDatabase) GetTenant(id int) (domain.Tenant, bool) {
	if tenant, found := findTenantById(d.tenants, id); found {
		return *tenant, found
	}
	return domain.Tenant{}, false
}

func (d mockDatabase) GetTenantsById(ids []int) []domain.Tenant {
	var foundTenants []domain.Tenant
	for _, id := range ids {
		if tenant, found := findTenantById(d.tenants, id); found {
			foundTenants = append(foundTenants, *tenant)
		}
	}
	return foundTenants
}

func findTenantById(tenants []domain.Tenant, id int) (*domain.Tenant, bool) {
	for _, tenant := range tenants {
		if tenant.Id == id {
			return &tenant, true
		}
	}
	return nil, false
}

func (d *mockDatabase) CreateTenant(tenant domain.Tenant) []domain.Tenant {
	d.tenants = append(d.tenants, tenant)
	return d.tenants
}

func (d *mockDatabase) UpdateTenant(id int, tenantUpdate database.TenantUpdate) (domain.Tenant, bool) {
	if i := indexOfTenant(d.tenants, id); i != -1 {
		tenantUpdate.UpdateTenantWithValuesFrom(&d.tenants[i], d)
		return d.tenants[i], true
	}
	return domain.Tenant{}, false
}

func indexOfTenant(tenants []domain.Tenant, id int) (int) {
	for i, tenant := range tenants {
		if tenant.Id == id {
			return i
		}
	}
	return -1
}

func (d* mockDatabase) DeleteTenant(id int) (domain.Tenant, bool) {
	tenantToRemove := domain.Tenant{}
	found := false
	j := 0
	for _, tenant := range d.tenants {
		if tenant.Id != id {
			d.tenants[j] = tenant
			j++
		} else {
			tenantToRemove = tenant
			found = true
		}
	}
	d.tenants = d.tenants[:j]
	return tenantToRemove, found
}

